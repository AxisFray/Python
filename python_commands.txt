-    -    -    -    -    -    -    -    LISTY    -    -    -    -    -    -    -    -    -    -    
list.append(x)

    Dodaje element na końcu listy. Ekwiwalent a[len(a):] = [x].

list.extend(iterable)

    Rozszerza listę przez dodanie wszystkich elementów iterable’a. Ekwiwalent a[len(a):] = iterable.

list.insert(i, x)

    Wstawia element na podaną pozycję. Pierwszy argument jest indeksem elementu, przed który wstawiamy, więc a.insert(0, x) wstawia na początek listy a a.insert(len(a), x) odpowiada a.append(x).


OPERACJE NA TABLICACH
list.remove(x)

    Usuń pierwszy element z listy, którego wartość jest równa x. Rzuca ValueError, jeśli nie ma takiego elementu.

list.pop([i])

    Remove the item at the given position in the list, and return it. If no index is specified, a.pop() removes and returns the last item in the list. It raises an IndexError if the list is empty or the index is outside the list range.

list.clear()

    Usuwa wszystkie elementy z listy. Ekwiwalent del a[:].

list.index(x[, start[, end]])

    Zwraca indeks (liczony od zera) pierwszego elementu na liście, którego wartość jest równa x. Rzuca ValueError, jeśli nie ma takiego elementu.

    Opcjonalne argumenty start i end są interpretowane jak w notacji slice i służą do ograniczenia wyszukiwania do szczególnej podsekwencji listy. Zwracany indeks jest wyliczany względem początku pełnej sekwencji, nie względem argumentu start.

list.count(x)

    Zwraca liczbę razy, jaką x występuje w liście.

list.sort(*, key=None, reverse=False)

    Sortuje elementy listy w miejscu (argumenty mogą służyć do dostosowania sortowania, patrz sorted() po ich wyjaśnienie).

list.reverse()

    Odwraca elementy listy w miejscu.

list.copy()

    Zwraca płytką kopię listy. Ekwiwalent a[:].



-    -    -    -    -    -    -    -    PLIKI    -    -    -    -    -    -    -    -    -    -    

filepath = "dane.txt"  # ścieżka relative
filepath = "E:\blog\dane.txt"  # ścieżka absolute
f = open(filepath, "r")  # otwarcie pliku
    “r” – plik otwarty do odczytu (read)
    “w” – plik otwarty do zapisu (write), przed zapisem zawartość pliku jest usuwana
    “a” – plik otwarty do zapisu, dodaje nową treść na końcu pliku, nie usuwa starej (append)
f = open(filepath, "r", encoding="utf-8")

f.read() # czyta caly plik
f.read(8) #pierwsze 8 znakow
f.readline() #czyta pierwszą linie kazdeponowne uzycie to kolejna linia

for line in f: 
    print(line) #czytanie za pomoca petli
lines = f.readlines() #linestolista w ktorej jeden element to linia z pliku

f.write("dane2") #zapisuje do pliku tekst
f.writelines(lines) #zapisuje do pliku tablicę każdy element to linia

f.close() #zamykanie pliku

-    -    -    -    -    -    -    -    RANDOM    -    -    -    -    -    -    -    -    -    
RANDOM - biblioteka wbudowana

shuffle(tablica) #losowo zamienia elementy tablicy ,nic nie zwraca

randint(a,b) #losowe liczby od a do b

choice(lista) #losowy element listy

sample(lista,ilosc) # zwraca liste z dlugoscia ilosc wybrana z listy

random() #losowa liczba float z zakresu 0.0 - 1.0 bez 1


-    -    -    -    -    -    -    -       MATPLOTLIB  NUMPY  -    -    -    -    -    -    -    -    -    
import matplotlib
import numpy
xpoints = np.array([0, 6])
ypoints = np.array([0, 250])

plt.plot(xpoints, ypoints)
plt.show()
//tworzenie wykresu funkcji z punktow x i y

matplotlib.plot(x,y)
//tworzenie wykresu z punktow x i y

matplotlib.plot(ypoints, marker = 'o')
//wykres zpunktow oznaczonych markerem np.kropka

 matplotlib.plot(ypoints, linestyle = 'dotted')
//linia wykresu kropkowana
 matplotlib.plot(ypoints, linestyle = 'dashed')
//liniowana

 matplotlib.plot(ypoints, color="r")
//kolor czerwony
 matplotlib.plot(ypoints, c='#4CAF50')
//kolory w kodzie heksadecymalnym

 matplotlib.plot(ypoints, linewidth = '20.5')
//grubosc lini wykresu 

y1 = np.array([3, 8, 1, 10])
y2 = np.array([6, 2, 7, 11])
//definicja 2 wykresow
plt.plot(y1)
plt.plot(y2)
//tworzenie 2 wykresow
plt.show()
//pokazanie 2 wykresow na 1 osi

x1 = np.array([0, 1, 2, 3])
y1 = np.array([3, 8, 1, 10])
x2 = np.array([0, 1, 2, 3])
y2 = np.array([6, 2, 7, 11])
//punkty x i y dla obu funkcji
plt.plot(x1, y1, x2, y2)
plt.show()

matplotlib.xlabel("Average Pulse")
matplotlib.ylabel("Calorie Burnage")
//nazwy osi
matplotlib.title("Sports Watch Data")
//tytul wykresu

matplotlib.grid()
//dodaje siatke lini na wykresie ,przed show()

matplotlib.grid(axis = 'x')
//siatka tylko pionowa
matplotlib.grid(axis = 'y')
//siatka pozioma

matplotlib.grid(color = 'green', linestyle = '--', linewidth = 0.5)
//kolor styl lini grubosc linii siatki na wykresie

matplotlib.subplot(1, 2, 1)
//the figure has 1 row, 2 columns, and this plot is the first plot. 
//mozna skladowac wykresu i potem pokazac 2 na raz


    -    -    -    -    -    -
x = np.random.randint(100, size=(100))
y = np.random.randint(100, size=(100))
colors = np.random.randint(100, size=(100))
sizes = 10 * numpy.random.randint(100, size=(100))
plt.scatter(x, y, c=colors, s=sizes, alpha=0.5, cmap='nipy_spectral')
plt.colorbar()
plt.show() 

    -    -    -    -    -
#plot 1:
x = np.array([0, 1, 2, 3])
y = np.array([3, 8, 1, 10])

plt.subplot(1, 2, 1)
plt.plot(x,y)
plt.title("SALES")

#plot 2:
x = np.array([0, 1, 2, 3])
y = np.array([10, 20, 30, 40])

plt.subplot(1, 2, 2)
plt.plot(x,y)
plt.title("INCOME")

plt.show()
    -    -    -    -    -    

matplotlib.scatter(x, y)
//rysuje kropki na wykresie zamiast linii
matplotlib.scatter(x, y,c="#FFF4344")

matplotlib.scatter(x, y, c=colors, cmap='viridis')
//mapa kolorowa skala 

matplotlib.scatter(x, y, c=colors, cmap='viridis')
matplotlib.colorbar()
//dodaje skale kolorową obok mapy

matplotlib.scatter(x, y, s=sizes)
//sizes tablica,kropki wieksza wartosc wiekszy rozmiar

matplotlib.scatter(x, y, s=sizes, alpha=0.5)
//przezroczystosc kropekna wykresie

matplotlib.bar(x,y)
//wykres slupkowy

matplotlib.bar(x,y)
//wykresslupkowy od lewej

plt.bar(x, y, color = "hotpink")

matplotlib.hist(x)
//histogram z listy x

matplotlib.pie(y)
//wykres kołowy zlisty y

y = np.array([35, 25, 25, 15])
mylabels = ["Apples", "Bananas", "Cherries", "Dates"]
plt.pie(y, labels = mylabels)
//wykres kołowy z podpisami

y = np.array([35, 25, 25, 15])
mylabels = ["Apples", "Bananas", "Cherries", "Dates"]
myexplode = [0.2, 0, 0, 0]
plt.pie(y, labels = mylabels, explode = myexplode)
//explode to odsuniecie czesci od wykresu tutaj apples

matplotlib.pie(y, labels = mylabels, colors = mycolors)
//y to dane ,labels nazwy, mycolors kolory

matplotlib.legend()
//dodajelegende do wykresu funkcji ,przed show()
legend(title = "Four Fruits:")
//tytul legendy

